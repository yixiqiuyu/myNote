Mybatis

1.Mybatis是一个基于java的持久层框架，主要用来做数据库的访问操作
	Jdbc做数据访问操作缺点：
		（1）代码冗余大，开发效率低下
		（2）sql命令定义在java程序里，如果sql发生改变会导致代码的重新编译
		（3）所有O-R mapping的动作都需要手动完成
2.Mybatis框架
	框架：对现有代码的合理封装，便于后续重复调用，提高开发效率

3.MyBatis体系结构
	(1)提供了一个映射文件--mapper文件（向MyBatis提出功能要求）
	1.interface AccountDao{
		public void insertAccount(Account a);
	}
	---jdbc
	public class AccountDaoImpl implements AccountDao{
		public void insertAccount(Account a){
			Connection conn=null;
			PreparedStatement p=null;
			try{
				conn=JDBCUtil.getConnection();
				String sql="insert into account values(...)";
				p=conn.PrepareStatement(sql);
				p.setxxx();
				p.ececuteUpdate();
			}catch(Exception e){
				e.printStackTrace()
			}finally{ 
				JDBCUtil.close(null,pstm)
			}
		}
	}
	-----MyBatis---通过mapper文件完成功能，文件后缀为xml
	<mapper namespace="包名.AccountDao">
		<insert id="insertAccount">  //所要实现的方法名
			insert into account values(......)
		</insert>
	</mapper>
	
	(2)MyBatis根据给定的mapper文件自动生成相应的java实现类

3.搭建MyBatis开发环境
	1）引入MyBatis需要的jar包
		mabatis3.1.1.jar ojdbc5.jar log4j-1.2.17.jar(打印日志)
	2）为MyBatis设置运行环境（通过配置文件设置）
		将mybatis-config.xml 和 log4j.properties文件放置在src目录下
	3）MyBatis的核心类
		SqlSessionFactoryBuilder:负责加载mubatis-config.xml文件内容
		SqlSessionFactory：负责构建SqlSession
		SqlSession：一次数据库“会话”，包含了多次数据库访问操作，相当于jdbc里的Connection，
4.第一个MyBatis程序
	1）新建表和实体类
	2）定义dao接口
	3）通过映射文件实现dao接口
		<mapper namespace="需要实现的接口的全类名">
			<insert id="本标签需要实现的接口里的方法名" parameterType="方法参数的类型，如果是对象需要写全限定名">
			insert sql命令（命令里通过#{对象属性名}获取对象属性）
			</insert>
		</mappper>
	4）将映射文件配置到mybatis-config.xml文件中（通知mybatis有一个映射文件）
		<mappers>
			<mapper resource="com/gejian/dao/PersonDaoImpl.xml"></mapper>
		</mappers>
	5）编写测试类，测试dao的功能 
		（1）创建SqlSessionFactoryBuilder对象--负责加载MyBatis的配置文件（MyBatis-config.xml）
			SqlSessionFactoryBuilder factory=new SqlSessionFactoryBulider();
		（2）调用builder的build方法可以加载配置文件，同时将读取到的内容保存在SqlSessionFactory对象中
			SqlSessionFactory factory=builder.build(Resources.getResourceAsReader("mybatis-config.xml"));
		（3）获得SqlSession对象---相当于jdbc中的Connection
			SqlSession session=factory.openSession();
		（4）使用session的getMapper()可以得到MyBatis生成的接口实现类
			XXXDao dao=session.getMapper(XXXDao.class);