Java中static方法和普通方法的区别
	在类中使用static修饰的静态方法会随着类的定义而被分配和装载入内存中；而非静态方法属于对象的具体实例，
	只有在类的对象创建时在对象的内存中才有这个方法的代码段。
	注意：非静态方法既可以访问静态数据成员 又可以访问非静态数据成员，而静态方法只能访问静态数据成员； 
注意：
	非静态方法既可以访问静态方法又可以访问非静态方法，而静态方法只能访问静态数据方法。 
原因：
	因为静态方法和静态数据成员会随着类的定义而被分配和装载入内存中，而非静态方法和非静态数据成员只有在
	类的对象创建时在对象的内存中才有这个方法的代码段。
	引用静态方法时，可以使用 类名.方法名 或 对象.方法名的形式
总结： 
（1）static修饰的静态方法会随着类的定义而被分配和装载入内存中，编译器只为整个类创建了一个静态变量的副本，
	也就是只分配一个内存空间，虽然可能有多个实例，但这些实例共享该内存，特别值得注意的是，任何一个对象对
	静态数据成员的修改，都会影响其它对象。 
（2）静态不能引用非静态这一特性，是由于静态的会随着类的定义而被分配和装载入内存中这一关键点决定的；如果静态
	引用了非静态的，根本无法从内存中找到非静态的代码段，势必会出错，这种做法是Java虚拟机决不允许的。

	
Java类加载过程：
	Java加载类机制 Class Loading
	前提：java原文件被javac编译为class字节码文件
	javac编译时不进行连接（分配内存）工作，而是在jvm运行时才动态加载和动态链接
	
	什么是类的加载：
		jvm将class文读取到内存中，经过对class文件的校验、转换解析、初始化最终在
		jvm的heap和方法区分配内存形成可以被jvm直接使用的类型的过程。
	
	类的声明周期（7个阶段）：
		Loading(加载),Verification(验证),Preparation(准备),Resolution(解析),Initialization(初始化),Using(使用),Unloading(卸载)

反射：
	什么是类对象：
		一个类对象，用来保存一个类的信息。所谓类的信息，包括：这个类继承自哪个类，
		实现了哪些接口，有哪些属性，有哪些方法，有哪些构造方法等等
	类对象的创建就是为了保存类的信息
	
	获取类对象的三种方式：
		1.类名.class
			要获得Student类的类对象：Class c=Student.class
		2.getClass()方法
			getClass方法主要是通过类的对象来获取类对象
		3.Class.forName()
			public static Class forName(String className) throws ClassNotFoundException
			这个方法接受一个字符串作为参数，这个字符串表示的是一个类名，这个静态方法能够根据这个类名返回一个类对象
			需要注意的两点是：
				1.当className所在的类不存在时，会抛出一个已检查异常ClassNotFoundException
				2.这个方法接受的字符串参数，必须带包名，例如，想要利用Class.forName获得ArrayList这个类对象的时候，必须利用
				Class.forName("java.util.ArrayList")这样的方式获得类对象，而不是Class.forName("ArrayList");