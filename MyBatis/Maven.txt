Maven
	
maven介绍及环境搭建：
	maven是基于项目对象模型（POM），可以通过一小段描述信息来管理
	项目的构建、报告和文档的软件项目管理工具

maven基本目录结构
	src
		--main
			--package
		--test
			--package
		--resource
			资源文件
	pom.xml
	
maven的基本命令：
	mvn -v 查看maven版本
		compile 编译
		test 测试
		package 打包项目
		
		clean 删除target
		install 安装jar包到本地项目中

自动创建目录骨架：
	一般结构：
		--src
			--main
				--java
					主代码
		--src
			--test
				测试代码
	
	命令：
		（1）mvn archetype:generate
			完成之后输入version
			输入groupId
			输入artifactId
			输入版本
			输入包名
		（2）mvn archetype:generate -DgroupId=组织名，公司网址的反写+项目名 -DartifactId=项目名-模块名 -Dversion=版本号 
			-Dpackage=代码所存在的包名

maven中的坐标和仓库：
	坐标
		构件
	仓库
		本地仓库和远程仓库
	镜像仓库：
		
maven生命周期：
	clean 清理项目
		pre-clean 执行清理前的工作
		clean 清理上一次构建生成的文件
		post-clean  执行清理后的工作
	default 构建项目（最核心）
		compile test package install
	site 生成项目站点
		pre-site 在生成项目站点前要完成的工作
		site 生成项目的站点文档
		post-site 在生成项目站点之后要完成的工作
		site-deploy 发布生成的站点到服务器上

pom.xml常用元素介绍：
	<?xml version="1.0" encoding="ISO-8859-1"?>
	<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"
	 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0">
		<!--指定了当前pom的版本-->
		<modelVersion>4.0.0</modelVersion>
		<groupId>com.gejian.maven01(反写的公司网址+项目名)</groupId>
		<artifactId>maven01-module(项目名+模块名)</artifactId>
		<!--
			第一个0代表大版本
			第二个0代表分支
			第三个0代表小版本
			snapshot 快照
			alpha 内部测试
			beta 公测
			Release 稳定
			GA 正式发布
		-->
		<version>0.0.1SNAPSHOT</version>
		<!--默认是jar
			war zip pom
		-->
		<packaging></packaging>
		<!--项目描述名-->
		<name></name>
		<!--项目地址-->
		<url></url>
		<!--项目描述-->
		<description></description>
		<!--开发者-->
		<developers></developers>
		<!--许可证信息-->
		<licenses><licenses>
		<!--组织信息-->
		<organization></organization>
		
		<dependencies>
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>4.10</version>
				<type></type>
				<scope></scope>
				<!--设置依赖是否可选  默认是false-->
				<optional></optional>
				<!--排除依赖传递列表-->
				<exclusions>
					<exclusion></exclusion>
				</exclusions>
			</dependency>
		</dependencies>
		
		<build>
			<!--插件列表-->
			<plugins>
				<plugin>
					<groupId></groupId>
					<artifactId></artifactId>
					<version></version>
				</plugin>
			<plugins>
		</build>
		<!--通常用于子模块中对父模块的继承-->
		<parent></parent>
		<!--用来-->
		<modules>
			<module></module>
		</modules>
	</project>

依赖范围：
	compile
		这是默认范围，如果未指定则使用。编译依赖项在项目的所有类路径中都可用。此外，这些依赖项将传播到依赖项目。
	provided
		这与编译很相似，但表示您希望JDK或容器在运行时提供依赖关系。例如，在为Java Enterprise Edition构建Web应用程序时，
		您可以将Servlet API和相关Java EE API的依赖关系设置为提供的范围，因为Web容器提供了这些类。此范围仅在编译和测试
		类路径中可用，并且不可传递。
	runtime
		此范围指示编译不需要依赖项，但是用于执行。它位于运行时和测试类路径中，但不是编译类路径。
	test
		此范围表示正常使用应用程序不需要依赖关系，并且仅适用于测试编译和执行阶段。此范围不具有传递性。
	system
		此范围与提供的类似，只是您必须提供明确包含它的JAR。工件始终可用，不会在存储库中查找。
	import
		此范围仅在<dependencyManagement>部分中的pom类型的依赖项上受支持。它指示要使用指定POM的
		<dependencyManagement>部分中的有效依赖项列表替换的依赖项。由于它们被替换，具有导入范围的
		依赖性实际上不参与限制依赖性的传递性。

依赖传递：
	<dependence>
		<groupId></groupId>
		<artifactId></artifactId>
		<version></version>
	</dependence>

依赖冲突：
	1.短路径优先
		A-->B-->C-->X(jar)
		A-->D-->X(jar)优先
	2.假如路径相同，谁在前谁优先
	
聚合和继承：
	