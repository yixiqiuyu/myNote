Spring
Sprint引言：
	Spring概念：Spring是一个轻量级的JavaEE解决方案，涵盖了众多的优秀设计模式
	设计模式：解决某一特定问题的经典代码 Golf4人帮中的23张设计模式
				单例 工厂 代理 适配器 构建者 策略 装饰器 模板...
	工厂设计模式：
		作用：生产或者创建对象
		好处：解耦合
		通用的工厂:
			public static Object getBean(String key){
				Object ret=null;
				try{
					Class clazz=Class.forName(env.getProperty(key));
					ret=clazz.newInstance();
				}catch(Exception e){
					e.printStackTrace();
				}
				return ret;
			}
		
		
	工厂怎么用：
		1.创建类
		2.书写配置文件
		3.通过工厂类的API获得对象， BeanFactory.getBean("key");
			
	
	
	
	
FactoryBean技术
	作用：让Spring工厂创建复杂对象（接口类型的对象）
FactoryBean的开发步骤：
	1.类 implements FactoryBean
		//书写创建赋值对象的代码，并把创建的复杂对象作为方法的返回值
		public Object getObject(){
			//创建SessionFactory对象
			Configuration cfg=new Configuration();
			cfg.configure();
			SessionFactory=cfg.buildSessionFactory();
			return SessionFactory;
			
		}
		//返回你所创建的复杂对象的类对象
		public Class getObjectType(){
			return SessionFactory.class;
		}
		//控制复杂对象的创建次数
		//return true只会创建一个复杂对象
		//return false每一次调用都会创建新的对象
		public boolean isSingleton(){}
	
	2.Spring的配置文件的配置
	
	
	
控制简单对象的创建次数
	<bean id="" class="" scope="singleton|prototype"></bean>
	single：只创建一次对象
	prototype：每一次都创建新的对象
	scope默认值为singleton
	
	为什么需要控制创建对象的次数？
		本质作用：减少内存的占用
	可以被多用户公用的对象：
		DAO Service SessionFactory...
	不可以被多用户公用的对象
		Connection Action 购物车对象

Spring工厂的高级特性
	Spring工厂创建对象的生命周期
		何时被创建
			工厂启动的时候，工厂中的对象就被创建
		何时被销毁
			显示调用工厂的close方法
		声明周期方法：
			初始化方法：方法名可以随便写，这个对象创建之后 由Spring进项调用，完成初始化工作
			销毁方法：方法名字可以随便写，这个对象销毁之前，由Spring进行调用，完成销毁工作
	
	PropertyPlaceHolderConfigure
		概念：把Spring配置文件中那些需要经常修改的字符串，转移到一个小的配置文件中
			1.准备一个小配置文件（.properties）
				文件名 随便
				放置位置 随便
			2.小配置文件与Spring配置文件的整合
			<context:property-placeholder location="小配置文件的位置"/>
			3.从小配置文件中通过${}取值
	
	Servlet什么时候被创建
	1.默认用户第一次访问Servlet时被创建
	2. web.xml 将会在Tomcat启动时就被创建
		<servlet>
			<load-on-startup>大于0的整数</load-on-startup>
		</servlet>
	Servletlet什么时候被销毁
		Tomcat关闭 或 重启
		
Spring的AOP（aspect oriented program 面向切面编程）编程
	代理设计模式（Proxy）
		概念：通过代理类，为原始类（原有类）增加额外功能
		好处：既保留了原有接口的统一，同时又极大程度保留原有代码，在原有功能基础之上提供了额外功能，
				提高开发效率，更加利于代码的维护
		
		名词解释：
			原有类（原始类，目标类）：被代理的那个类，需要加入额外功能的那个类
			额外功能：需要为原始类增加的功能
				额外功能不是核心的业务代码（事务，日志，性能）
				额外功能只能出现在原始功能之上 之下 之上之下
			代理=原始功能+额外功能
		//代理设计模式在实战中的作用
		代理设计模式存在的问题
			1.额外功能的代码冗余
			2.额外功能硬编码在了程序中 不利于维护
	
	Spring框架的动态代理
		1.原始类
		2.额外功能（事务 日志 性能）
		3.切入点（pointcut）
			额外功能加入的位置
			<aop-pointcut id="pt" expression="execution(* *(..))"/>
		4.组装代理类
		<aop:advisor pointcut-ref="pc" advice-ref="before"/>

AOP编程：
	概念：其本质就是Spring的动态代理开发，通过代理类为原始类增加额外的功能
	好处：减少额外功能的冗余，使程序更加利于维护
	AOP编程的开发步骤：
		1.原始对象
		2.额外对象
		3.切入点
		4.组装切面（切入点+额外功能）

		
Spring+Hibernate整合
	整合思路：org.springframmework.orm.hibernate4.HibernateTemplate
	结论：HibernateTemplate就是更强大的Session对象
		HibernateTemplate在满足原有的Session功能的基础之上，又提供了
		额外实用的功能
	开发依据：Spring+Hibernate整合过程 应用HibernateTemplate替换Session
	开发步骤：
		1.O
		2.R
		3.M
		4.DAO -->HibernateTemplate.save() update() delete() get()
		5.Spring的配置文件
			1）DataSource
			2）SessionFactory
			3）HibernateTemplate
			4）Dao
	HibernateTemplate的高级特性
		1.HibernateTemplate自动把Session绑定的线程，保证一个线程一个Session
		2.HibernateTemplate自动的在DAO层开启小的事务
		3.简化HQL的开发
			Hibernate中的HQL：
				Query query=session.createQuery("hql");
				query.setXXX();
				...
				...
				query.list();|query.uniquerResult();
			
			Spring :HQL
				List<User> users=hibernateTemplate.find("from User");
				List<User> users=hibernateTemplate.find("from User as u where u.name=? and u.password=?",
														new Object[]{"gejian","123456"}
														);
								=hibernateTemplate.find("from User as u where u.name=? and u.password=?",
														"gejian","123456"
														);
			注意：find方法只能返回List集合 如果返回的查询结果是单行数据，那么通过List的0号元素获得
	
	HibernateTemplate的一个特殊的方法execute(HibernateCallback hcb)
	
	
Spring官方版本的事务控制
	1）什么是事务
		数据库（RDB）保证业务操作完整性的一种机制（强一致性）
	2）事务在哪里处理
		业务层控制（Service）
	3）如何控制事务
		JDBC-----Connection
			Connection.setAutoCommit(false);
			Connection.commit();
			Connection.rollback();
		Hibernate-----SessionFactory
			Transaction tx=session.beginTracsaction();
			tx.commit();
			tx.rollback();
	4)Spring中如何控制事务（AOP动态代理的开发）
		1）原始对象（Service调用DAO完成业务处理）
		2）额外功能
			控制事务的代码  MethodIntercepter 注入SessionFactory
				orm.springframework.orm.hibernate3.HibernateTransactionManager
			事务属性
				隔离属性（isolation）
					解决并发问题的特点 
						1.数据的脏读 ISOLATION_READ_COMMITTED
							一个事务读取了另一个事务未提交的数据
						2.数据的不可重复ISOLATION_REPEATABLE_READ（对应数据库中的行锁）
							一个事务中对相同的数据进行多次读取，但是结果不一致 
						3.数据的幻影读 SIOLATION_SERIALIZABLE_READ
							在一个事务，进行统计工作中，对相同的表尽心过多次统计，但是结果不一致
				传播属性（propagation）
					事务嵌套问题
						PROPAGATION_REQUIRED:当外部不存在事务，则开启事务
											当外部存在事务，则进行融合
											（增删改）
						PROPAGATION_SUPPORTS:当外部不存在事务，则不开启事务
											当外部存在事务，则进行融合
											（查询）
				只读属性（read-only）
					如果你的事务是查询操作，指定read_only=true提高系统效率
				超时属性（timeout）（默认值：-1（由数据库默认决定））
					当数据被另一个事务锁住时，通过超时属性决定等待时间
				异常属性
					Spring默认对于RuntimeException及其子类  回滚策略
								  Exception及其子类         提交策略
					rollback-for=="异常的全限定名"
					no-rollback-for=="异常的全限定名"
		3）切入点
		4）组装切面